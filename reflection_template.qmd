---
title: "STAT 331 Portfolio"
author: "Erica Geam"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1
# Lab 3

teacher_evals <- read_csv(here::here("Week 3", "Lab 3", "teacher_evals.csv"))
```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2
# Lab 4

childcare_costs <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/childcare_costs.csv')

counties <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/counties.csv')

tax_rev <- read_csv('https://atheobold.github.io/groupworthy-data-science/labs/instructions/data/ca_tax_revenue.csv')
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx
# PA 4

library(tidyverse)
library(readxl)
military <- read_xlsx("gov_spending_per_capita.xlsx",
                      sheet = "Share of Govt. spending",
                      skip  = 7,
                      n_max = 191,
                      na = c("..", ". .", "xxx")
                      )
```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1
# Challenge 3, Q1

teacher_evals_compare <- teacher_evals |> 
  filter(question_no == 903) |> 
  mutate(
    set_level = if_else(SET_score_avg >= 4, "excellent",
                            "standard"),
    sen_level = case_when(seniority <= 4 ~ "junior",
                          seniority >= 5 & seniority <= 8 ~ "senior",
                          seniority > 8 ~ "very senior")
) |> 
    select(course_id, set_level, sen_level)

teacher_evals_compare
```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2


```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3
# Lab 4, Q7

center_based_childcare <- ca_childcare |> 
 filter(study_year %in% c (2008, 2010, 2012, 2014, 2016, 2018)) |> 
 select(region, study_year, mc_infant, mc_toddler, mc_preschool) |> 
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_weekly_price"
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1

#Lab 3

teacher_evals_clean <- teacher_evals |> 
  rename(sex = gender) |> 
  filter(no_participants > 10) |> 
  mutate(teacher_id = as.character(teacher_id)) |> 
  select(teacher_id,
        course_id,
        question_no,
        no_participants,
        resp_share,
        SET_score_avg,
        percent_failed_cur,
        academic_degree,
        seniority,
        sex)
  
teacher_evals_clean
```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1

#Lab 3

teacher_evals_compare <- teacher_evals |> 
  filter(question_no == 903) |> 
  mutate(
    set_level = if_else(SET_score_avg >= 4, "excellent",
                            "standard"),
    sen_level = case_when(seniority <= 4 ~ "junior",
                          seniority >= 5 & seniority <= 8 ~ "senior",
                          seniority > 8 ~ "very senior")
) |> 
    select(course_id, set_level, sen_level)

teacher_evals_compare
```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character

#Lab 5

person3 <- person |> 
  left_join(get_fit_now_member |> 
              rename(member_id = id),
          by = join_by(name == name)
          ) |> 
  left_join(drivers_license,
            by = join_by(license_id == id)
            ) |> 
  left_join(get_fit_now_check_in,
            by = join_by(member_id == membership_id)
            ) |> 
   mutate(
    check_in_date = ymd(check_in_date)
  ) |> 
filter(
  membership_status == "gold",
  str_detect(plate_number, pattern = "H42"), 
  str_detect(member_id, pattern = "48Z"),
  month(check_in_date) == 1
)
person3
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

#Lab 5

person2 <- person1 |> 
  filter(
    (address_street_name == "Franklin Ave" & str_detect(person$name, pattern = "^Annabel")) |
    (address_street_name == "Northwestern Dr" & 
       address_number == max(address_number[address_street_name == "Northwestern Dr"]))
  )
person2
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

#Lab 5

rich_woman <- person1 |> 
  left_join(drivers_license,
            by = join_by(license_id == id)
            ) |> 
  left_join(facebook_event_checkin,
            by = join_by(id == person_id)
            ) |> 
  mutate(
    date = ymd(date)
  ) |> 
  filter(
    height %in% c ("65","66", "67"),
    hair_color == "red",
    car_make == "Tesla",
    car_model == "Model S",
    event_name == "SQL Symphony Concert",
    month(date) == 12
  ) 
rich_woman
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1

#Challenge 3, Q1

teacher_evals_compare <- teacher_evals |> 
  filter(question_no == 903) |> 
  mutate(
    set_level = if_else(SET_score_avg >= 4, "excellent",
                            "standard"),
    sen_level = case_when(seniority <= 4 ~ "junior",
                          seniority >= 5 & seniority <= 8 ~ "senior",
                          seniority > 8 ~ "very senior")
) |> 
    select(course_id, set_level, sen_level)

teacher_evals_compare
```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2



```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1


```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

# Lab 4, Q7

# https://www.youtube.com/watch?v=UVriK-W1DNg&t=760s I used this youtube video to help me rescale my x-axis to be the evenly spaced years from 2008 to 2018.

center_based_childcare <- ca_childcare |> 
 filter(study_year %in% c (2008, 2010, 2012, 2014, 2016, 2018)) |> 
 select(region, study_year, mc_infant, mc_toddler, mc_preschool) |> 
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_weekly_price"
  ) |> 
  mutate (
    age_group = fct_relevel(fct_recode(age_group,
                                       "Infant" = "mc_infant",
                                       "Toddler" = "mc_toddler",
                                       "Preschool" = "mc_preschool"),
                            "Infant",
                            "Toddler",
                            "Preschool"))
  
ggplot(data = center_based_childcare,
       aes(x = study_year, y = median_weekly_price, color = fct_reorder2(region, study_year, median_weekly_price))) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = "loess", se = FALSE, linewidth = 0.7) + 
  scale_color_brewer(palette = "Set3") + 
  facet_wrap (~ age_group) +
  scale_x_continuous(breaks = seq (2008, 2018, by = 2)) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = "",
    color = "California Region"
  ) +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6))
```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

#Lab 4, Q4

ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |> 
  mutate(region = fct_collapse(county_name,
        "Superior California" = superior_counties,
        "North Coast" = north_coast_counties,
        "San Francisco Bay Area" = san_fran_counties,
        "Northern San Joaquin Valley" = n_san_joaquin_counties,
        "Central Coast" = central_coast_counties,
        "Southern San Joaquin Valley" = s_san_joaquin_counties,
        "Inland Empire" = inland_counties,
        "Los Angeles County" = la_county,
        "Orange County" = orange_county,
        "San Diego-Imperial" = san_diego_imperial_counties))
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

#Lab 5

person3 <- person |> 
  left_join(get_fit_now_member |> 
              rename(member_id = id),
          by = join_by(name == name)
          ) |> 
  left_join(drivers_license,
            by = join_by(license_id == id)
            ) |> 
  left_join(get_fit_now_check_in,
            by = join_by(member_id == membership_id)
            ) |> 
   mutate(
    check_in_date = ymd(check_in_date)
  ) |> 
filter(
  membership_status == "gold",
  str_detect(plate_number, pattern = "H42"), 
  str_detect(member_id, pattern = "48Z"),
  month(check_in_date) == 1
)
person3
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1

#Lab 5

ca_childcare <- ca_childcare |>
  left_join(tax_rev,
          by = join_by("county_name" == "entity_name", "study_year" == "year")
          )

ca_childcare
```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right

#Lab 5

jeremy_bowers_interview <- interview |> 
  right_join(person3,
            by = join_by(person_id == id)
            ) |> 
  select(name, transcript)

  
jeremy_bowers_interview
```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

#Lab 5

rich_woman <- person1 |> 
  left_join(drivers_license,
            by = join_by(license_id == id)
            ) |> 
  left_join(facebook_event_checkin,
            by = join_by(id == person_id)
            ) |> 
  mutate(
    date = ymd(date)
  ) |> 
  filter(
    height %in% c ("65","66", "67"),
    hair_color == "red",
    car_make == "Tesla",
    car_model == "Model S",
    event_name == "SQL Symphony Concert",
    month(date) == 12
  ) 
rich_woman
```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1

#Lab 5

person3 <- person |> 
  inner_join(get_fit_now_member |> 
              rename(member_id = id),
          by = join_by(name == name)
          ) |> 
  inner_join(drivers_license,
            by = join_by(license_id == id)
            ) |> 
  inner_join(get_fit_now_check_in,
            by = join_by(member_id == membership_id)
            ) |> 
   mutate(
    check_in_date = ymd(check_in_date)
  ) |> 
filter(
  membership_status == "gold",
  str_detect(plate_number, pattern = "H42"), 
  str_detect(member_id, pattern = "48Z"),
  month(check_in_date) == 1
)
person3
```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi
# Lab 5

person2 <- person1 |> 
  filter(
    (address_street_name == "Franklin Ave" & str_detect(person$name, pattern = "^Annabel")) |
    (address_street_name == "Northwestern Dr" & 
       address_number == max(address_number[address_street_name == "Northwestern Dr"]))
  ) |> 
  select(
    name,
    address_street_name
  )
person2 <- person1 |> 
  semi_join(
    person2, 
    by = join_by(name, address_street_name)
  )
person2
```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Example 1
-   Example 2
-   Example 3
-   Example 4
-   Example 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1

```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2

```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1

```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

```

-   Example using `across()`

```{r}
#| label: dvs-4-across

```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

```

-   Example 2

```{r}
#| label: dvs-5-2

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1

```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

```

-   using `across()`

```{r}
#| label: pe-1-across

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

```

-   Example 2

```{r}
#| label: dsm-2-2

```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
