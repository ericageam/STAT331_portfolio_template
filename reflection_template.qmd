---
title: "STAT 331 Portfolio"
author: "Erica Geam"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A-.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1

# Lab 3

teacher_evals <- read_csv(here::here("Week 3", "Lab 3", "teacher_evals.csv"))
```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2

# Lab 4

childcare_costs <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/childcare_costs.csv')

counties <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/counties.csv')

tax_rev <- read_csv('https://atheobold.github.io/groupworthy-data-science/labs/instructions/data/ca_tax_revenue.csv')
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

# PA 4

library(tidyverse)
library(readxl)
military <- read_xlsx("gov_spending_per_capita.xlsx",
                      sheet = "Share of Govt. spending",
                      skip  = 7,
                      n_max = 191,
                      na = c("..", ". .", "xxx")
                      )
```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1

# Challenge 3, Q1

teacher_evals_compare <- teacher_evals |> 
  filter(question_no == 903) |> 
  mutate(
    set_level = if_else(SET_score_avg >= 4, "excellent",
                            "standard"),
    sen_level = case_when(seniority <= 4 ~ "junior",
                          seniority >= 5 & seniority <= 8 ~ "senior",
                          seniority > 8 ~ "very senior")
) |> 
    select(course_id, set_level, sen_level)

teacher_evals_compare
```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2


```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3

# Lab 4, Q7
# Growing Comments: Nice work pivoting and modifying the age variable!
# Nice work reordering your legend!
# Can you reorder the facets so they go in the same order as mine?
#I like your colors!!!

#Revisions: I added fct_relevel and fct_recode to change my facets to be in the order of “infant”, “toddler,” and “preschool.” This makes it easier to compare my facets based on developmental stages, and not alphabetically. I will be sure to use fct_relevel and fct_recode in my future assignments, to make my facets more interpretable to the reader. 


center_based_childcare <- ca_childcare |> 
 filter(study_year %in% c (2008, 2010, 2012, 2014, 2016, 2018)) |> 
 select(region, study_year, mc_infant, mc_toddler, mc_preschool) |> 
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_weekly_price"
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1

# Lab 3, Q5

# Success Comments: Should course_id be treated as a numerical variable? These are a proxy for a course subject and number. If the variable was recorded as STAT 331 then it would be read in as a character...

# Addition: I changed'course_id' into a character variable.

teacher_evals_clean <- teacher_evals |> 
  rename(sex = gender) |> 
  filter(no_participants > 10) |> 
  mutate(teacher_id = as.character(teacher_id),
         course_id = as.character(course_id)
         ) |> 
  select(teacher_id,
        course_id,
        question_no,
        no_participants,
        resp_share,
        SET_score_avg,
        percent_failed_cur,
        academic_degree,
        seniority,
        sex)
  
teacher_evals_clean
```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1

# Challenge 3, Q1

teacher_evals_compare <- teacher_evals |> 
  filter(question_no == 903) |> 
  mutate(
    set_level = if_else(SET_score_avg >= 4, "excellent",
                            "standard"),
    sen_level = case_when(seniority <= 4 ~ "junior",
                          seniority >= 5 & seniority <= 8 ~ "senior",
                          seniority > 8 ~ "very senior")
) |> 
    select(course_id, set_level, sen_level)

teacher_evals_compare
```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character

# Lab 5, Wittness Leads

person3 <- person |> 
  left_join(get_fit_now_member |> 
              rename(member_id = id),
          by = join_by(name == name)
          ) |> 
  left_join(drivers_license,
            by = join_by(license_id == id)
            ) |> 
  left_join(get_fit_now_check_in,
            by = join_by(member_id == membership_id)
            ) |> 
   mutate(
    check_in_date = ymd(check_in_date)
  ) |> 
filter(
  membership_status == "gold",
  str_detect(plate_number, pattern = "H42"), 
  str_detect(member_id, pattern = "48Z"),
  month(check_in_date) == 1
)
person3
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

# Lab 5, Inspecting Witnesses

person2 <- person1 |> 
  filter(
    (address_street_name == "Franklin Ave" & str_detect(person$name, pattern = "^Annabel")) |
    (address_street_name == "Northwestern Dr" & 
       address_number == max(address_number[address_street_name == "Northwestern Dr"]))
  )
person2
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

# Lab 5, Jeremy Bowers' Lead

rich_woman <- person1 |> 
  left_join(drivers_license,
            by = join_by(license_id == id)
            ) |> 
  left_join(facebook_event_checkin,
            by = join_by(id == person_id)
            ) |> 
  mutate(
    date = ymd(date)
  ) |> 
  filter(
    height %in% c ("65","66", "67"),
    hair_color == "red",
    car_make == "Tesla",
    car_model == "Model S",
    event_name == "SQL Symphony Concert",
    month(date) == 12
  ) 
rich_woman
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1

# Challenge 3, Q1

teacher_evals_compare <- teacher_evals |> 
  filter(question_no == 903) |> 
  mutate(
    set_level = if_else(SET_score_avg >= 4, "excellent",
                            "standard"),
    sen_level = case_when(seniority <= 4 ~ "junior",
                          seniority >= 5 & seniority <= 8 ~ "senior",
                          seniority > 8 ~ "very senior")
) |> 
    select(course_id, set_level, sen_level)

teacher_evals_compare
```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2



```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1


```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

# Lab 4, Q7

# https://www.youtube.com/watch?v=UVriK-W1DNg&t=760s I used this youtube video to help me rescale my x-axis to be the evenly spaced years from 2008 to 2018.

# Growing Comments: Nice work pivoting and modifying the age variable!
# Nice work reordering your legend!
# Can you reorder the facets so they go in the same order as mine?
#I like your colors!!!

#Revisions: I added fct_relevel and fct_recode to change my facets to be in the order of “infant”, “toddler,” and “preschool.” This makes it easier to compare my facets based on developmental stages, and not alphabetically. I will be sure to use fct_relevel and fct_recode in my future assignments, to make my facets more interpretable to the reader. 

center_based_childcare <- ca_childcare |> 
 filter(study_year %in% c (2008, 2010, 2012, 2014, 2016, 2018)) |> 
 select(region, study_year, mc_infant, mc_toddler, mc_preschool) |> 
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_weekly_price"
  ) |> 
  mutate (
    age_group = fct_relevel(fct_recode(age_group,
                                       "Infant" = "mc_infant",
                                       "Toddler" = "mc_toddler",
                                       "Preschool" = "mc_preschool"),
                            "Infant",
                            "Toddler",
                            "Preschool"))
  
ggplot(data = center_based_childcare,
       aes(x = study_year, y = median_weekly_price, color = fct_reorder2(region, study_year, median_weekly_price))) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = "loess", se = FALSE, linewidth = 0.7) + 
  scale_color_brewer(palette = "Set3") + 
  facet_wrap (~ age_group) +
  scale_x_continuous(breaks = seq (2008, 2018, by = 2)) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = "",
    color = "California Region"
  ) +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6))
```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

# Lab 4, Q4

ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County")) |> 
  mutate(region = fct_collapse(county_name,
        "Superior California" = superior_counties,
        "North Coast" = north_coast_counties,
        "San Francisco Bay Area" = san_fran_counties,
        "Northern San Joaquin Valley" = n_san_joaquin_counties,
        "Central Coast" = central_coast_counties,
        "Southern San Joaquin Valley" = s_san_joaquin_counties,
        "Inland Empire" = inland_counties,
        "Los Angeles County" = la_county,
        "Orange County" = orange_county,
        "San Diego-Imperial" = san_diego_imperial_counties))
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

# Lab 5, Inspecting Witnesses

person3 <- person |> 
  left_join(get_fit_now_member |> 
              rename(member_id = id),
          by = join_by(name == name)
          ) |> 
  left_join(drivers_license,
            by = join_by(license_id == id)
            ) |> 
  left_join(get_fit_now_check_in,
            by = join_by(member_id == membership_id)
            ) |> 
   mutate(
    check_in_date = ymd(check_in_date)
  ) |> 
filter(
  membership_status == "gold",
  str_detect(plate_number, pattern = "H42"), 
  str_detect(member_id, pattern = "48Z"),
  month(check_in_date) == 1
)
person3
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1

# Lab 4, Q3

# Success Comment: Nice work noticing that there are two keys that need to be used for joining!
# Do you need quotes for the column names???

#Addition: I deleted the quotes for the column names, as they are unnecessary.

ca_childcare <- ca_childcare |>
  left_join(tax_rev,
          by = join_by(county_name == entity_name, study_year == year)
          )

ca_childcare
```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right

# Lab 5, Jeremy Bowers Interview
# right-join()- revised

jeremy_bowers_interview <- interview |> 
  right_join(person3,
            by = join_by(person_id == id)
            ) |> 
  select(name, transcript)

  
jeremy_bowers_interview
```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

#Lab 5, Jeremy Bowers' Lead

rich_woman <- person1 |> 
  left_join(drivers_license,
            by = join_by(license_id == id)
            ) |> 
  left_join(facebook_event_checkin,
            by = join_by(id == person_id)
            ) |> 
  mutate(
    date = ymd(date)
  ) |> 
  filter(
    height %in% c ("65","66", "67"),
    hair_color == "red",
    car_make == "Tesla",
    car_model == "Model S",
    event_name == "SQL Symphony Concert",
    month(date) == 12
  ) 
rich_woman
```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1

# Lab 5, Wittness Leads
# inner-join() revised

person3 <- person |> 
  inner_join(get_fit_now_member |> 
              rename(member_id = id),
          by = join_by(name == name)
          ) |> 
  inner_join(drivers_license,
            by = join_by(license_id == id)
            ) |> 
  inner_join(get_fit_now_check_in,
            by = join_by(member_id == membership_id)
            ) |> 
   mutate(
    check_in_date = ymd(check_in_date)
  ) |> 
filter(
  membership_status == "gold",
  str_detect(plate_number, pattern = "H42"), 
  str_detect(member_id, pattern = "48Z"),
  month(check_in_date) == 1
)
person3
```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

# Lab 5, Inspecting Witnesses
# semi-join() revised

person2 <- person1 |> 
  filter(
    (address_street_name == "Franklin Ave" & str_detect(person$name, pattern = "^Annabel")) |
    (address_street_name == "Northwestern Dr" & 
       address_number == max(address_number[address_street_name == "Northwestern Dr"]))
  ) |> 
  select(
    name,
    address_street_name
  )
person2 <- person1 |> 
  semi_join(
    person2, 
    by = join_by(name, address_street_name)
  )
person2
```

-   `anti_join()`

```{r}
#| label: wd-6-anti

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

#Lab 4, Q7

# https://www.youtube.com/watch?v=UVriK-W1DNg&t=760s I used this youtube video to help me rescale my x-axis to be the evenly spaced years from 2008 to 2018.

# Growing Comments: Nice work pivoting and modifying the age variable!
# Nice work reordering your legend!
# Can you reorder the facets so they go in the same order as mine?
#I like your colors!!!

#Revisions: I added fct_relevel and fct_recode to change my facets to be in the order of “infant”, “toddler,” and “preschool.” This makes it easier to compare my facets based on developmental stages, and not alphabetically. I will be sure to use fct_relevel and fct_recode in my future assignments, to make my facets more interpretable to the reader. 

center_based_childcare <- ca_childcare |> 
 filter(study_year %in% c (2008, 2010, 2012, 2014, 2016, 2018)) |> 
 select(region, study_year, mc_infant, mc_toddler, mc_preschool) |> 
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_weekly_price"
  ) |> 
  mutate (
    age_group = fct_relevel(fct_recode(age_group,
                                       "Infant" = "mc_infant",
                                       "Toddler" = "mc_toddler",
                                       "Preschool" = "mc_preschool"),
                            "Infant",
                            "Toddler",
                            "Preschool"))
  
ggplot(data = center_based_childcare,
       aes(x = study_year, y = median_weekly_price, color = fct_reorder2(region, study_year, median_weekly_price))) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = "loess", se = FALSE, linewidth = 0.7) + 
  scale_color_brewer(palette = "Set3") + 
  facet_wrap (~ age_group) +
  scale_x_continuous(breaks = seq (2008, 2018, by = 2)) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = "",
    color = "California Region"
  ) +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6))
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

# Lab 4, Q5

# Growing Comments: Nice work remembering to drop the groups! The second group would not have been dropped by default, so this is an important step to remember!

# Can you give your column names better titles, so the reader knows what "2008" and "2018" represent? What are the values stored in these columns?

# Revisions: My column names weren’t very explanatory, as they were just the years “2008” and “2018.” After listening to Dr. T’s feedback in Tuesday's lecture, I added names_prefix = “Median_income_” to rename my columns. Now, readers can better understand what the columns represent (the median income of each region for the years 2008 and 2018).

region_median_income <- ca_childcare |> 
  filter(study_year %in% c(2008, 2018)) |> 
  group_by(region, study_year) |> 
  summarize(median_income = median(mhi_2018, na.rm = TRUE),
            .groups = "drop") |> 
  pivot_wider(
    names_from = study_year,
    values_from = median_income,
    names_prefix = "Median_Income_"
  ) |> 
  arrange(desc(`Median_Income_2018`))

region_median_income
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Challenge 2
-   Challenge 3
-   Lab 5
-   Example 4
-   Example 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

# Challenge 2, Q2 - spicy-option

ggplot(data = surveys,
       mapping = aes(x = weight, 
                     y = species, 
                     color = sex)) +
  geom_jitter(alpha = 0.05) +
  geom_boxplot(outlier.shape = NA) +
  labs(x = "Weight (g)", y = "Animal Species") +
  scale_color_brewer(palette = "Dark2") +
  theme_bw() +
  theme(panel.grid.minor = element_blank()) 
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

# Challenge 3, Q1

teacher_evals_compare <- teacher_evals |> 
  filter(question_no == 903) |> 
  mutate(
    set_level = if_else(SET_score_avg >= 4, "excellent",
                            "standard"),
    sen_level = case_when(seniority <= 4 ~ "junior",
                          seniority >= 5 & seniority <= 8 ~ "senior",
                          seniority > 8 ~ "very senior")
) |> 
    select(course_id, set_level, sen_level)

teacher_evals_compare
```

-   Example of function formatting

```{r}
#| label: r-2-3

# Lab 5, Jeremy Bowers Interview

jeremy_bowers_interview <- interview |> 
  right_join(person3,
            by = join_by(person_id == id)
            ) |> 
  select(name, transcript)

  
jeremy_bowers_interview
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example

```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num

# Lab 4, Q8

ggplot(data = ca_childcare, 
       aes(x = mhi_2018, y = mc_infant)) + 
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "green"  ) + 
  labs(title = "Full-Time median weekly price for center-based childcare in CA (Infant)", 
       x = "Median Household income in 2018 ($)", 
       y = NULL) +
  scale_y_continuous(labels = scales::label_currency(prefix = "$")) +
  scale_x_continuous(labels = scales::label_currency(prefix = "$"))
```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

# Challenge 2, Q2- medium option

ggplot(data = surveys,
       mapping = aes(x = weight, 
                     y = species, 
                     color = sex)) +
  geom_jitter(alpha = 0.05) +
  geom_boxplot(outlier.shape = NA) +
  labs(x = "Animal Species", y = "Weight (g)") +
  scale_color_brewer(palette = "Set3") +
  theme_bw()
```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat


```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

# Lab 4, Q7

ggplot(data = center_based_childcare,
       aes(x = study_year, y = median_weekly_price, color = fct_reorder2(region, study_year, median_weekly_price))) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = "loess", se = FALSE, linewidth = 0.7) + 
  scale_color_brewer(palette = "Set3") + 
  facet_wrap (~ age_group) +
  scale_x_continuous(breaks = seq (2008, 2018, by = 2)) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = "",
    color = "California Region"
  ) +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6))
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1

```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2

# Lab 4, Q7

# I researched colorblind friendly color palettes, and 'Set3' was my favorite option from the RColorBrewer package.
  
ggplot(data = center_based_childcare,
       aes(x = study_year, y = median_weekly_price, color = fct_reorder2(region, study_year, median_weekly_price))) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = "loess", se = FALSE, linewidth = 0.7) + 
  scale_color_brewer(palette = "Set3") + 
  facet_wrap (~ age_group) +
  scale_x_continuous(breaks = seq (2008, 2018, by = 2)) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = "",
    color = "California Region"
  ) +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6))
```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

# Challenge 3, Q2

ggplot(data = teacher_evals_compare, aes(x = sen_level, fill = set_level)) +
       geom_bar(position = "fill") +
       scale_y_continuous(labels = scales::percent) +
labs(title = "Evaluation of Teacher's Use of Activities", x = "Years of Experience", y = NULL, fill = "Evaluation Rating") +
scale_fill_manual(values = c("excellent" = "plum3", "standard" = "goldenrod4")) +
theme_bw() +
theme(legend.position = "top") 
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4

# Lab 2, Q16

# Rotated boxplot, makes it easier for people to read the name of the animal species

ggplot(data = surveys,
       mapping = aes(x = weight, 
                     y = species )) +
  geom_jitter(color = "steelblue", alpha = 0.05) +
  geom_boxplot(outlier.shape = NA) +
  labs(x = "Weight (g)", y = "Animal Species") +
  theme_bw()
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5

# Lab 4, Q7

# I used fct_reorder2 to align the colors in the same order as the California regions in the plot
  
ggplot(data = center_based_childcare,
       aes(x = study_year, y = median_weekly_price, color = fct_reorder2(region, study_year, median_weekly_price))) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = "loess", se = FALSE, linewidth = 0.7) + 
  scale_color_brewer(palette = "Set3") + 
  facet_wrap (~ age_group) +
  scale_x_continuous(breaks = seq (2008, 2018, by = 2)) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = "",
    color = "California Region"
  ) +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6))
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1

# Challenge 2, Q2- medium option

# I like using "Set3" from the RColorBrewer package (colorblind friendly) and theme_bw, as the white background makes the plot easier to interpret


ggplot(data = surveys,
       mapping = aes(x = weight, 
                     y = species, 
                     color = sex)) +
  geom_jitter(alpha = 0.05) +
  geom_boxplot(outlier.shape = NA) +
  labs(x = "Animal Species", y = "Weight (g)") +
  scale_color_brewer(palette = "Set3") +
  theme_bw()
```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

# Challenge 2, Q2 - spicy-option

# I also added the 'Dark2' color palette because I wanted two contrasting colors for the viewer to easily differentiate between sex. 

# I added theme_bw because the white background makes the boxplots more easier to see and interpret compared to a gray background.

ggplot(data = surveys,
       mapping = aes(x = weight, 
                     y = species, 
                     color = sex)) +
  geom_jitter(alpha = 0.05) +
  geom_boxplot(outlier.shape = NA) +
  labs(x = "Weight (g)", y = "Animal Species") +
  scale_color_brewer(palette = "Dark2") +
  theme_bw() +
  theme(panel.grid.minor = element_blank())
```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

# Lab 3, Q11

# Growing Comments: This also suggests there is *one* max and *one* min. Is that the case? Were there ties?

# Revisions: I mistakenly used slice(which.min()) which.max()), which only gave me the minimum and maximum of a [variable] for only one instructor, when in fact, there were multiple instructors that held the minimum and maximum of [variable], and were therefore tied. 

# I replaced slice(which.min()) which.max()) with  filter(avg.resp_share == min(avg.resp_share) | avg.resp_share == max(avg.resp_share). As a result, I’ve discovered the instructors that were tied with each other regarding the lowest average percentage of students responding to the evaluations across courses.

teacher_evals_clean |> 
  filter(seniority == 1) |> 
  group_by(teacher_id) |> 
  summarize(
  avg_percent_failed_cur = mean(percent_failed_cur, na.rm = TRUE),
  .groups = "drop"
) |> 
  filter(
        avg_percent_failed_cur == min(avg_percent_failed_cur) | avg_percent_failed_cur == max(avg_percent_failed_cur)
  )
```

-   Example using `across()`

```{r}
#| label: dvs-4-across


```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

# Lab 3, Q9

#My classmate Alexa sent me this youtube video [https://www.youtube.com/watch?v=SYZvw3KcZqk], which helped me better understand the summarize function. 

teacher_evals_clean |> 
  group_by(teacher_id, course_id) |> 
  summarize(
  num_questions = n_distinct(question_no), .groups = "drop"
  ) |>   
  filter (num_questions == 9) |> 
  summarize(total_all_nine_questions = n())
```

-   Example 2

```{r}
#| label: dvs-5-2

# Lab 4, Q6

region_median_weekly_price <- ca_childcare |>
 filter(study_year == 2018) |> 
  group_by(region) |> 
  summarize(median_weekly_price = median(mc_infant, na.rm = TRUE), .groups = "drop") |> 
  slice(which.min(median_weekly_price))

region_median_weekly_price
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1

# Lab 4, Q5

# Growing Comments: Nice work remembering to drop the groups! The second group would not have been dropped by default, so this is an important step to remember!

# Can you give your column names better titles, so the reader knows what "2008" and "2018" represent? What are the values stored in these columns?

# Revisions: My column names weren’t very explanatory, as they were just the years “2008” and “2018.” After listening to Dr. T’s feedback in Tuesday's lecture, I added names_prefix = “Median_income_” to rename my columns. Now, readers can better understand what the columns represent (the median income of each region for the years 2008 and 2018).

region_median_income <- ca_childcare |> 
  filter(study_year %in% c(2008, 2018)) |> 
  group_by(region, study_year) |> 
  summarize(median_income = median(mhi_2018, na.rm = TRUE),
            .groups = "drop") |> 
  pivot_wider(
    names_from = study_year,
    values_from = median_income,
    names_prefix = "Median_Income_"
  ) |> 
  arrange(desc(`Median_Income_2018`))

region_median_income
```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3

# Lab 4, Q5

# Growing Comments: Nice work remembering to drop the groups! The second group would not have been dropped by default, so this is an important step to remember!

# Can you give your column names better titles, so the reader knows what "2008" and "2018" represent? What are the values stored in these columns?

# Revisions: My column names weren’t very explanatory, as they were just the years “2008” and “2018.” After listening to Dr. T’s feedback in Tuesday's lecture, I added names_prefix = “Median_income_” to rename my columns. Now, readers can better understand what the columns represent (the median income of each region for the years 2008 and 2018).

# I used arrange() with desc() to sort the median income from highest to lowest income for each region. 

region_median_income <- ca_childcare |> 
  filter(study_year %in% c(2008, 2018)) |> 
  group_by(region, study_year) |> 
  summarize(median_income = median(mhi_2018, na.rm = TRUE),
            .groups = "drop") |> 
  pivot_wider(
    names_from = study_year,
    values_from = median_income,
    names_prefix = "Median_Income_"
  ) |> 
  arrange(desc(`Median_Income_2018`))

region_median_income
```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

# Lab 5, Jeremy Bowers' Lead

rich_woman <- person1 |> 
  left_join(drivers_license,
            by = join_by(license_id == id)
            ) |> 
  left_join(facebook_event_checkin,
            by = join_by(id == person_id)
            ) |> 
  mutate(
    date = ymd(date)
  ) |> 
  filter(
    height %in% c ("65","66", "67"),
    hair_color == "red",
    car_make == "Tesla",
    car_model == "Model S",
    event_name == "SQL Symphony Concert",
    month(date) == 12
  ) 
rich_woman
```

-   using `across()`

```{r}
#| label: pe-1-across

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

# Lab 4, 
```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

#Lab 4, Q7

# https://www.youtube.com/watch?v=UVriK-W1DNg&t=760s I used this youtube video to help me rescale my x-axis to be the evenly spaced years from 2008 to 2018.

# Growing Comments: Nice work pivoting and modifying the age variable!
# Nice work reordering your legend!
# Can you reorder the facets so they go in the same order as mine?
#I like your colors!!!

#Revisions: I added fct_relevel and fct_recode to change my facets to be in the order of “infant”, “toddler,” and “preschool.” This makes it easier to compare my facets based on developmental stages, and not alphabetically. I will be sure to use fct_relevel and fct_recode in my future assignments, to make my facets more interpretable to the reader. 

center_based_childcare <- ca_childcare |> 
 filter(study_year %in% c (2008, 2010, 2012, 2014, 2016, 2018)) |> 
 select(region, study_year, mc_infant, mc_toddler, mc_preschool) |> 
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "median_weekly_price"
  ) |> 
  mutate (
    age_group = fct_relevel(fct_recode(age_group,
                                       "Infant" = "mc_infant",
                                       "Toddler" = "mc_toddler",
                                       "Preschool" = "mc_preschool"),
                            "Infant",
                            "Toddler",
                            "Preschool"))
  
ggplot(data = center_based_childcare,
       aes(x = study_year, y = median_weekly_price, color = fct_reorder2(region, study_year, median_weekly_price))) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = "loess", se = FALSE, linewidth = 0.7) + 
  scale_color_brewer(palette = "Set3") + 
  facet_wrap (~ age_group) +
  scale_x_continuous(breaks = seq (2008, 2018, by = 2)) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = "",
    color = "California Region"
  ) +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6))
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

# Challenge 3, Q3

# Chi-squared test

chisq.test(table(teacher_evals_compare$set_level,
                 teacher_evals_compare$sen_level))        
```

-   Example 2

```{r}
#| label: dsm-2-2

# Lab 4, Q9

# Linear regression

ca_childcare <- lm(mc_infant ~ mhi_2018, data = ca_childcare)
summary(ca_childcare)
```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

Throughout the course, I was given very helpful feedback from Dr. T to improve my labs and challenges. Each time a lab or challenge was graded, I would carefully read the feedback and subsequently incorporate them into my code and revisions. For example, the growing comments informed me that I had redundant code, or should have made my plot axis labels more explanatory, to give context to the reader. Moreover, even if I recieved a 'success' on a question, I would go back and try to improve my code if Dr. T included some suggestions. In my revisions, I would thoroughly explain my mistakes and how I fixed them by using the correct syntax or necessary functions.

Within my portfolio, I included both growing and success comments as well as my written revisions as code comments before my fixed code. Some of my examples include **wd-2-ex-3**, **wd-3-numeric-ex-1**, and **dvs-4-summarize**. Overall, I was able to grow as a coder by identifying what I needed to improve on, and then reflecting on them. As a result, I am reminded on how to write more efficient code in following labs and challenges.

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

To extend my thinking, I revised some of my code in order to meet the requirements for certain learning objectives. For example, for learning objectives **wd-5-right**, **wd-5-inner-ex1**, and **wd-6-semi**, I changed my left-join() functions to a right-join(), inner-join(), and semi-join(), respectively. Moreover, as seen in learning objective **r-2-1**, (challenge 2), I used colorbrewerpalette() to change the colors of my boxplots, as I like to make my visualizations more unique and personalized. I also always like to include theme: cosmo in my YAML header and include a table of contents to make my documents more aesthetically pleasing and easy to navigate. Additionally, I make sure that all my code is readable and tidy by incorporating white space and named arguments. Lastly, in my portfolio, I added code comments (as seen in the Data Visualization) section to explain why I chose a palette, theme, or reordering in the plot.

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

Each time we are assigned peer reviews, I like to give positive feedback on what my peers excelled in, as well as some helpful feedback on how they can improve their code.

For example, here is my peer review for **Lab 2: Exploring Rodents with ggplot2**:

*Great job on making your code very readable! I like how you consistently used named arguments (e.g. ggplot(data = surveys...) and (color = "orange3") in your code, as it gives a better understanding on what you were trying to achieve. Moreover, amazing job using white spaces between each character (once again, making your code easily digestible).*

*However, for question 15, you didn't turn the x-axis labels 45 degrees to prevent the overlapping of the text. Therefore, we couldn't see the species names. If you go back to question 15, Dr. T provided us the starter code to prevent this from happening!*

*Moreover, one little mistake you might've missed was in the challenge assignment, where you didn't include the proper measurement (g) on the x-axis for weight.*

*Overall, great job!!*

Furthermore, I also really enjoyed collaborating with my peers through the weekly paired programming activities. Through them, I was able to grow as a collaborator by not only navigating my own learning style, but learning how to work with my partners in a more equitable manner through the coder/developer roles. I believe that a crucial part of education is learning from each other, which undoubtedly requires harmonious group dynamics and fairness. With my partners, I always tried my best to adhere to the roles. Whenever it was my turn to be the coder, I would happily offer my opinions and suggestions to my partner. When it would be my turn to be the developer, I would listen to my partner and type their proposals even at times where I knew the correct function or syntax. Lastly, whenever we were both stuck on a question, I made sure I had my partner's approval to request help from Dr. T or the TA.
